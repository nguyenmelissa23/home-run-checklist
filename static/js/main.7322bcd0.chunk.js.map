{"version":3,"sources":["logo.svg","utils/firebase.js","components/auth/auth.component.js","components/header/header.component.js","utils/localStorage.js","components/task/task.component.js","components/taskList/taskList.component.js","components/taskInput/taskInput.component.js","App.js","reportWebVitals.js","redux/rootSaga.js","redux/taskRedux/task.reducer.js","redux/userRedux/user.types.js","redux/userRedux/user.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["firebaseConfig","apiKey","config","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","auth","provider","firestore","GithubAuthProvider","setCustomParameters","prompt","Authentication","useState","currentUser","setCurrentUser","useEffect","onClick","signOut","then","console","log","catch","error","message","displayName","signInWithPopup","result","credential","accessToken","userObj","user","email","code","Header","src","logo","className","alt","localStorage","window","saveTaskList","taskList","setItem","JSON","stringify","Task","taskObj","index","task","updateTask","handleClickOnBox","taskName","completed","updatedTask","updateTaskStatus","TaskList","map","TaskManager","input","setInput","tasks","setTasks","onSubmit","event","preventDefault","push","onChange","target","value","name","type","clear","App","parse","getItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","initialState","taskReducer","state","action","TaskActionTypes","UPDATE_STATUS","payload","ADD_NEW","DELETE","UserActionTypes","Sign_In_With_Github","Sign_Out","Sign_In_With_Error","userReducer","SIGN_IN","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ylBAAe,G,YAAA,IAA0B,kC,8CCMnCA,EAAiB,CACrBC,OAAQC,EAAOD,OACfE,WAAYD,EAAOC,WACnBC,YAAaF,EAAOE,YACpBC,UAAWH,EAAOG,UAClBC,cAAeJ,EAAOI,cACtBC,kBAAmBL,EAAOK,kBAC1BC,MAAON,EAAOM,OAGhBC,IAASC,cAAcV,GAGhB,IAYMW,EAAOF,IAASE,OAEhBC,GADYH,IAASI,YACV,IAAIJ,IAASE,KAAKG,oBAC1CF,EAASG,oBAAoB,CAC3BC,OAAQ,mBAyCKP,EAAf,EAtCO,ICPSQ,EAtBO,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACrBC,EADqB,KACRC,EADQ,KAO5B,OAJAC,qBAAU,cAEP,CAACF,IAGH,8BAEEA,EACA,gCACC,wBAAQG,QAAS,WDsCOX,EAAKY,UAAUC,MAAK,WAEhDC,QAAQC,IAAI,2BACVC,OAAM,SAACC,GAETH,QAAQC,IAAI,kBAAmBE,EAAMC,YC3CET,EAAe,OAAlD,sBACCD,EAAYW,eAEb,wBAAQR,QAAS,kBAAMF,EDcUT,EAAKoB,gBAAgBnB,GAAUY,MAAK,SAACQ,GAEvDA,EAAOC,WAEDC,YAFzB,IAIMC,EAAUH,EAAOI,KACjBA,EAAO,CACZN,YAAaK,EAAQL,YACrBO,MAAOF,EAAQE,OAIhB,OAFAZ,QAAQC,IAAI,wBACZD,QAAQC,IAAI,SAAUU,GACfA,KACLT,OAAM,SAACC,GAIT,OAHAH,QAAQC,IAAI,eAAgBE,EAAMU,MAClCb,QAAQC,IAAI,kBAAmBE,EAAMC,SACrCJ,QAAQC,IAAI,gBAAiBE,EAAMS,OAC5BT,OChCH,oCCNUW,EAZA,WACd,OACC,gCACC,qBAAKC,IAAKC,EAAMC,UAAU,WAAWC,IAAI,SACzC,oBAAID,UAAU,YAAd,2CACA,cAAC,EAAD,QCXUE,EAAeC,OAAOD,aAEtBE,EAAe,SAACC,GAC5BH,EAAaI,QAAQ,UAAWC,KAAKC,UAAUH,KC6BjCI,EA5BF,SAAC,GAAgC,IAA/BJ,EAA8B,EAA9BA,SAAUK,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAAW,EAEjBnC,mBAASkC,GAFQ,mBAErCE,EAFqC,KAE/BC,EAF+B,KAQ5C,SAASC,IACR/B,QAAQC,IAAI,iBACZ6B,EAAW,CACVE,SAAUH,EAAKG,SACfC,WAAYJ,EAAKI,YAInB,OAZArC,qBAAU,YDQqB,SAACgC,EAAOM,EAAaZ,GACpDA,EAASM,GAASM,EAClBb,EAAaC,GACbtB,QAAQC,IAAIqB,EAASM,ICVpBO,CAAiBP,EAAOC,EAAMP,KAC5B,CAACO,EAAMD,EAAON,IAWhB,gCAEEO,EAAKI,UACL,sBAAMhB,UAAU,UAAUpB,QAASkC,EAAnC,qBACC,sBAAMd,UAAU,UAAUpB,QAASkC,EAAnC,qBAEF,sBAAMd,UAAU,WAAhB,SAA4BY,EAAKG,eCIrBI,EApBE,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAClB,OAAIA,EAEFA,EAASe,KAAI,SAACR,EAAMD,GACnB,OACC,8BACC,8BACC,cAAC,EAAD,CAAMD,QAASE,EAAMD,MAAOA,EAAON,SAAUA,KADpCM,QASb,mDCuCYU,EAxDK,SAAC,GAAgB,IAAfhB,EAAc,EAAdA,SAAc,EAET7B,mBAAS,IAFA,mBAE5B8C,EAF4B,KAErBC,EAFqB,OAGT/C,mBAAS6B,GAHA,mBAG5BmB,EAH4B,KAGrBC,EAHqB,KA0CnC,OApCA9C,qBAAU,WACTyB,EAAaoB,MAoCb,gCACC,uBAAME,SAlCR,SAAqBC,GACpB5C,QAAQC,IAAI,aACZ2C,EAAMC,iBACN7C,QAAQC,IAAIwC,GACZzC,QAAQC,IAAIsC,GACRE,GACHzC,QAAQC,IAAI,MACZwC,EAAMK,KAAK,CACVd,SAASO,EACTN,WAAW,IAEZO,EAAS,MAETxC,QAAQC,IAAI,QACZyC,EAAS,CAAC,CACTV,SAASO,EACTN,WAAW,KAEZO,EAAS,MAgBT,UACC,+CACW,uBAAOO,SAdrB,SAAwBH,GACvBJ,EAASI,EAAMI,OAAOC,OACtBjD,QAAQC,IAAI2C,EAAMI,OAAOC,QAYqBA,MAAOV,EAAOW,KAAK,eAE/D,wBAAQC,KAAK,SAASlC,UAAU,cAAhC,oBAED,cAAC,EAAD,CAAUK,SAAUmB,IACpB,wBAAQ5C,QAdV,WHlCAsB,EAAaiC,QGoCZV,EAAS,OAYR,yBCpCYW,MAff,WAEC,IAAI/B,EJJaE,KAAK8B,MAAMnC,EAAaoC,QAAQ,YIKhD,OACE,sBAAKtC,UAAU,MAAf,UACE,cAAC,EAAD,IACH,cAAC,EAAD,CAAaK,SAAUA,QCHXkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,oECHWO,GAAV,SAAUA,IAAV,iEACd,OADc,SACRC,YAAI,IADI,uC,8CCFTC,EAAe,GAqBNC,EAnBK,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACrD,OAAQA,EAAOlB,MACd,KAAKmB,IAAgBC,cACpB,OAAOF,EAAOG,QACf,KAAKF,IAAgBG,QAKrB,KAAKH,IAAgBI,OACpB,MAAM,GAAN,mBACIN,GADJ,CAECC,EAAOG,UAET,QACC,OAAOJ,I,QCbKO,EANS,CACvBC,oBAAqB,sBACrBC,SAAU,WACVC,mBAAoB,sBCDfZ,EAAe,CACpBxE,YAAa,KACbS,MAAO,MA2BO4E,EAxBK,WAAoC,IAAnCX,EAAkC,uDAA1BF,EAAcG,EAAY,uCACtD,OAAQA,EAAOlB,MACd,KAAKwB,EAAgBE,SACpB,kCACIT,GADJ,IAEC1E,YAAa,KACb+C,MAAO,KACPtC,MAAO,OAET,KAAKwE,EAAgBK,QACpB,MAAO,CACNtF,YAAa2E,EAAOG,QACpBrE,MAAO,MAET,KAAKwE,EAAgBG,mBACpB,MAAO,CACNpF,YAAa,KACbS,MAAOkE,EAAOG,SAEhB,QACC,OAAOJ,ICpBJa,EAAgB,CACrBC,IAAK,OACLC,QAASA,IACTC,UAAW,IAGNC,EAAcC,YAAgB,CACnC7C,MAAO0B,EACPxD,KAAMoE,IAGQQ,cAAeN,EAAeI,GCXvCG,EAAiBC,cACjBC,EAAa,CAACF,GAMpB,IAAMG,EAAQC,YAAYP,EAAaQ,IAAe,WAAf,EAAmBH,IAE1DF,EAAeM,IAAI9B,GACZ,IAES2B,EAFSI,YAAaJ,GCPtCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACC,cAAC,EAAD,QAGDQ,SAASC,eAAe,SAM1B5C,M","file":"static/js/main.7322bcd0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import firebase from 'firebase/app';\nimport 'firebase/auth'; \nimport 'firebase/firestore';\n\nimport config from './config.json';\n\nconst firebaseConfig = {\n  apiKey: config.apiKey,\n  authDomain: config.authDomain,\n  databaseURL: config.databaseURL,\n  projectId: config.projectId,\n  storageBucket: config.storageBucket,\n  messagingSenderId: config.messagingSenderId,\n  appId: config.appId\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n//TASKS\nexport const saveNewTask =  () => {\n\t\n}\n\nexport const getCurrentTaskList = () => {}\n\n//USER:\nexport const createNewUser = (user) => {\n\n}\n\n//AUTH \nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); \nexport const provider = new firebase.auth.GithubAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n\nexport const signInWithGithub = () => auth.signInWithPopup(provider).then((result) => {\n\t/** @type {firebase.auth.OAuthCredential} */\n\tconst credential = result.credential;\n\t// This gives you a GitHub Access Token. You can use it to access the GitHub API.\n\tconst token = credential.accessToken;\n\t//current signed in user:\n\tconst userObj = result.user;\n\tconst user = {\n\t\tdisplayName: userObj.displayName,\n\t\temail: userObj.email, \n\t}\n\tconsole.log(\"signInWithGithub... \");\n\tconsole.log(\"user: \", user);\n\treturn user;\n}).catch((error) =>{\n\tconsole.log(\"error.code: \", error.code);\n\tconsole.log(\"error.message: \", error.message);\n\tconsole.log(\"error.email: \", error.email);\n\treturn error\n});\n\nexport const signOut = () => auth.signOut().then(() => {\n  // Sign-out successful.\n\tconsole.log(\"Sign-out successful.\");\n}).catch((error) => {\n  // An error happened.\n\tconsole.log(\"error.message: \", error.message)\n});\n\nexport const checkUserStatus = () => firebase.auth().onAuthStateChanged(user =>{\n\tif (user){\n\t\t//User is signed in\n\t\treturn {currentUser: user, isLoggedIn: true };\n\t} else{\n\t\t//user is signed\n\t\treturn {currentUser: null, isLoggedIn: false };\n\t}\n})\nexport default firebase;","import React, { useEffect, useState } from 'react';\nimport {connect} from 'react-redux';\nimport { signInWithGithub, signOut} from 'utils/firebase';\n\n// import {\n// \tsignIn, \n// \tsignOut\n// } from 'redux/userRedux/user.actions'\n\nconst Authentication = () => {\n\tconst [currentUser, setCurrentUser] = useState(null);\n\n\tuseEffect(() => {\n\n\t}, [currentUser])\n\n\treturn (\n\t\t<div>\n\t\t\t{ \n\t\t\t\tcurrentUser ? \n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => {signOut(); setCurrentUser(null)}}>Sign Out</button>\n\t\t\t\t\t{currentUser.displayName}\n\t\t\t\t</div>\n\t\t\t\t:<button onClick={() => setCurrentUser(signInWithGithub())}>Sign In with Github</button>\n\t\t\t}\t\n\t\t</div>\n\t\t\n\t)\n}\n\nexport default (Authentication);","import React from 'react';\nimport logo from 'logo.svg';\n\n// import {signInWithGithub, signOut} from 'utils/firebase';\nimport Authentification from 'components/auth/auth.component';\n\nconst Header = () => {\n\treturn (\n\t\t<div>\n\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t<h2 className='App-title'>Passion Project: The Home Run</h2>\n\t\t\t<Authentification />\n\t\t</div>\n\t)\n}\n\n\n\nexport default Header; ","export const localStorage = window.localStorage;\n\nexport const saveTaskList = (taskList) => {\n\tlocalStorage.setItem('taskObj', JSON.stringify(taskList))\n}\n\nexport const getTaskList = () => {\n\tconst taskList =\tJSON.parse(localStorage.getItem('taskObj'));\n\treturn taskList;\n}\n\nexport const clearTaskList = () => {\n\tlocalStorage.clear();\n\treturn null;\n}\n\nexport const updateTaskStatus = (index, updatedTask, taskList) => {\n\ttaskList[index] = updatedTask;\n\tsaveTaskList(taskList);\n\tconsole.log(taskList[index])\n}\n// clearTaskList();","import React, {useState, useEffect} from 'react'; \n\n// import uncheckedBox from 'assets/uncheckedBox.png';\nimport {updateTaskStatus} from 'utils/localStorage';\nconst Task = ({taskList, taskObj, index}) => {\n\t\n\tconst [task, updateTask] = useState(taskObj)\n\n\tuseEffect(() => {\n\t\tupdateTaskStatus(index, task, taskList);\n\t}, [task, index, taskList])\n\n\tfunction handleClickOnBox(){ \n\t\tconsole.log('check the box');\n\t\tupdateTask({\n\t\t\ttaskName: task.taskName, \n\t\t\tcompleted: !task.completed\n\t\t})\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\ttask.completed ?\n\t\t\t\t<span className='taskBox' onClick={handleClickOnBox}>☑ </span>\n\t\t\t\t:<span className='taskBox' onClick={handleClickOnBox}>□ </span>\n\t\t\t}\n\t\t\t<span className='taskName'>{task.taskName}</span>\n\t\t</div>\n\t)\n}\n\nexport default Task;","import React from 'react';\n\nimport Task from 'components/task/task.component';\nimport {getCurrentTasklist} from 'utils/firebase.js';\nimport {getTaskList, saveTaskList, clearTaskList} from 'utils/localStorage';\n\n// let tasks = getTaskList();\n\n// const tasks = await getCurrentTasklistO();\n\n\nconst TaskList = ({taskList}) => {\n\tif (taskList){\n\t\treturn (\n\t\t\ttaskList.map((task, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\t<Task taskObj={task} index={index} taskList={taskList}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<p>Please add tasks!</p>\n\t\t)\n\t}\n}\n\nexport default TaskList;\n\n","import React, {useEffect, useState} from 'react'; \n\nimport { saveNewTask } from 'utils/firebase';\nimport TaskList from 'components/taskList/taskList.component';\nimport {getTaskList, saveTaskList, clearTaskList} from 'utils/localStorage';\n\n\n// let tasks = getTaskList();\n\nconst TaskManager = ({taskList}) => {\n\n\tconst [input, setInput] = useState('');\n\tconst [tasks, setTasks] = useState(taskList);\n\t// let tasks = taskList;\n\n\tuseEffect(() => {\n\t\tsaveTaskList(tasks);\n\t});\n\n\tfunction addNewTask (event) {\n\t\tconsole.log('adding...')\n\t\tevent.preventDefault();\n\t\tconsole.log(tasks);\n\t\tconsole.log(input);\n\t\tif (tasks){\n\t\t\tconsole.log('if');\n\t\t\ttasks.push({\n\t\t\t\ttaskName:input,\n\t\t\t\tcompleted: false\n\t\t\t});\n\t\t\tsetInput('');\n\t\t} else {\n\t\t\tconsole.log('else');\n\t\t\tsetTasks([{\n\t\t\t\ttaskName:input,\n\t\t\t\tcompleted: false\n\t\t\t}]);\n\t\t\tsetInput('');\n\t\t}\n\t}\n\n\tfunction onUpdateInput (event){\n\t\tsetInput(event.target.value);\n\t\tconsole.log(event.target.value);\n\t}\n\n\tfunction onClickClear () {\n\t\tclearTaskList();\n\t\tsetTasks(null);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={addNewTask}>\n\t\t\t\t<label>\n\t\t\t\t\tNew task: <input onChange={onUpdateInput}  value={input} name='newTask'/>\n\t\t\t\t</label>\n\t\t\t\t<button type='submit' className='btn-primary'>Add</button>\n\t\t\t</form>\n\t\t\t<TaskList taskList={tasks}/>\n\t\t\t<button onClick={onClickClear}>-Clear-</button>\t\n\t\t</div>\n\t)\n}\n\nexport default TaskManager;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Header from 'components/header/header.component'\nimport TaskList from 'components/taskList/taskList.component';\nimport TaskInput from 'components/taskInput/taskInput.component';\nimport {getTaskList} from 'utils/localStorage';\nimport TaskManager from 'components/taskInput/taskInput.component';\n\nfunction App() {\n\n\tlet taskList = getTaskList();\n  return (\n    <div className=\"App\">\n      <Header/>\n\t\t\t<TaskManager taskList={taskList}/>\n    </div>\n  );\n}\n\n\n\n//\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { all, call } from 'redux-saga/effects';\n\n// import { userSaga } from './user/user.saga';\n\nexport default function* rootSaga() {\n\tyield all([\n\t\t// call(userSaga), \n\t])\n}","import TaskActionTypes from './task.types';\n\nconst initialState = [];\n\nconst taskReducer = (state = initialState, action) => {\n\tswitch (action.type){\n\t\tcase TaskActionTypes.UPDATE_STATUS:\n\t\t\treturn action.payload;\n\t\tcase TaskActionTypes.ADD_NEW:\n\t\t\treturn [\n\t\t\t\t...state, \n\t\t\t\taction.payload,\n\t\t\t]\n\t\tcase TaskActionTypes.DELETE:\n\t\t\treturn [\n\t\t\t\t...state, \n\t\t\t\taction.payload,\n\t\t\t]\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default taskReducer;\n","const UserActionTypes = { \n\tSign_In_With_Github: 'Sign_In_With_Github', \n\tSign_Out: 'Sign_Out', \n\tSign_In_With_Error: 'Sign_In_With_Error'\n}\n\nexport default UserActionTypes;","import UserActionTypes from './user.types.js';\n\nconst initialState = {\n\tcurrentUser: null,\n\terror: null\n};\n\nconst userReducer = (state = initialState, action ) => {\n\tswitch (action.type) {\n\t\tcase UserActionTypes.Sign_Out:\n\t\t\treturn{\n\t\t\t\t...state, \n\t\t\t\tcurrentUser: null, \n\t\t\t\ttasks: null, \n\t\t\t\terror: null\n\t\t\t}\n\t\tcase UserActionTypes.SIGN_IN:\n\t\t\treturn {\n\t\t\t\tcurrentUser: action.payload, \n\t\t\t\terror: null\n\t\t\t}\t\n\t\tcase UserActionTypes.Sign_In_With_Error:\n\t\t\treturn {\n\t\t\t\tcurrentUser: null, \n\t\t\t\terror: action.payload\n\t\t\t}\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\nexport default userReducer;\n\n","import {combineReducers} from 'redux';\nimport {persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport taskReducer from 'redux/taskRedux/task.reducer';\nimport userReducer from 'redux/userRedux/user.reducer';\n\nconst persistConfig = {\n\tkey: 'root', \n\tstorage: storage, \n\twhitelist: []\n};\n\nconst rootReducer = combineReducers({\n\ttasks: taskReducer, \n\tuser: userReducer\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n\n","import {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootSaga from './rootSaga';\nimport rootReducer from './rootReducer';\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development'){\n\tmiddleware.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\n\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);\n\nexport default (store, persistor)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport store from 'redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}